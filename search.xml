<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[前端]]></title>
    <url>%2F2018%2F12%2F05%2F%E6%9C%80%E8%BF%91%2F</url>
    <content type="text"><![CDATA[#挺久没写了，因为最近一直再忙，忙于各种招聘会，面试，考试，毕业，早就有预料到这个结果，找不到实习。 #各种招聘表面说实习，其实就是培训，反正我是不会去的，还是应该多试试找其他的道路 #最近好忙，周五有个面试。开始学习Vue。js。加油，别迷茫！]]></content>
  </entry>
  <entry>
    <title><![CDATA[前端]]></title>
    <url>%2F2018%2F11%2F20%2F%E7%BB%A7%E7%BB%AD%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[#软考结束了，考试的成绩还不知道，十一月挺忙的，各种毕业典礼，没怎么学习，我感觉也没什么用， #之前学的东西忘了挺多的，剩下的时间来学习，我也不知道还可以在学校呆多久， #学习永无止境，继续学习接下来的JQuery，我要去学习前端框架Bootstarp]]></content>
  </entry>
  <entry>
    <title><![CDATA[准备软考复习]]></title>
    <url>%2F2018%2F10%2F22%2F%E5%87%86%E5%A4%87%E8%BD%AF%E8%80%83%E5%A4%8D%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[最近半个月没时间去学习前端了，昨天复习了一整天，发现什么进制什么都不会，之前学过的都忘了，是时候要专心复习软考了，下视频重头开始，把这两天打的代码整理一下吧获取并设置 CSS 类123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - 获取并设置 CSS 类&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; /* jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些： addClass() - 向被选元素添加一个或多个类 removeClass() - 从被选元素删除一个或多个类 toggleClass() - 对被选元素进行添加/删除类的切换操作 css() - 设置或返回样式属性 */ /* jQuery addClass() 方法 下面的例子展示如何向不同的元素添加 class 属性。 当然，在添加类时，您也可以选取多个元素： */ $(document).ready(function () &#123; $(&quot;.b1&quot;).click(function () &#123; $(&quot;.add h1,.add h2,.add p&quot;).addClass(&quot;blue&quot;); $(&quot;.add div&quot;).addClass(&quot;important&quot;); &#125;); $(&quot;.b2&quot;).click(function () &#123; $(&quot;.add1 h1,.add1 h2,.add1 p&quot;).addClass(&quot;blue&quot;); $(&quot;.add1 div&quot;).addClass(&quot;important&quot;); &#125;); //您也可以在 addClass() 方法中规定多个类： $(&quot;.b3&quot;).click(function () &#123; $(&quot;.add2 div&quot;).addClass(&quot;important blue&quot;); &#125;); &#125;); /*jQuery removeClass() 方法 下面的例子演示如何不同的元素中 删除指定的 class 属性： */ $(document).ready(function () &#123; $(&quot;.b4&quot;).click(function () &#123; $(&quot;.add3 h1,.add3 h2,.add3 p&quot;).removeClass(&quot;blue&quot;); &#125;); /* * jQuery toggleClass() 方法 下面的例子将展示如何使用 jQuery toggleClass() 方法。 该方法对被选元素进行添加/删除类的切换操作： */ $(document).ready(function () &#123; $(&quot;.b5&quot;).click(function () &#123; $(&quot;.add4 h1,.add4 h2,.add4 p&quot;).toggleClass(&quot;blue&quot;); &#125;); &#125;); &#125;); &lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; .important&#123; font-weight: bold; font-size: xx-large;; &#125; .blue&#123; color: blue; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;add&quot;&gt;&lt;strong&gt;以下是增加类实验&lt;/strong&gt;&lt;h1&gt;标题 1&lt;/h1&gt;&lt;h2&gt;标题 2&lt;/h2&gt;&lt;p&gt;这是一个段落。&lt;/p&gt;&lt;p&gt;这是另一个段落。&lt;/p&gt;&lt;div&gt;这是非常重要的文本！&lt;/div&gt;&lt;br&gt;&lt;button class=&quot;b1&quot;&gt;向元素添加类&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;add1&quot;&gt; &lt;h1&gt;标题 2&lt;/h1&gt; &lt;h2&gt;标题 3&lt;/h2&gt; &lt;p&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;div&gt;这是非常重要的文本！&lt;/div&gt; &lt;br&gt; &lt;button class=&quot;b2&quot;&gt;向元素添加类&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;add2&quot;&gt; &lt;h1&gt;标题 2&lt;/h1&gt; &lt;h2&gt;标题 3&lt;/h2&gt; &lt;p&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;div&gt;这是非常重要的文本！&lt;/div&gt; &lt;br&gt; &lt;button class=&quot;b3&quot;&gt;向元素添加类&lt;/button&gt;&lt;/div&gt;&lt;hr&gt;&lt;div class=&quot;add3&quot;&gt; &lt;strong&gt;以下是删除类实验&lt;/strong&gt; &lt;h1 class=&quot;blue&quot;&gt;标题 1&lt;/h1&gt; &lt;h2 class=&quot;blue&quot;&gt;标题 2&lt;/h2&gt; &lt;p class=&quot;blue&quot;&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;br&gt; &lt;button class=&quot;b4&quot;&gt;从元素上删除类&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;add4&quot;&gt; &lt;strong&gt;以下是切换类实验&lt;/strong&gt; &lt;h1&gt;标题 1&lt;/h1&gt; &lt;h2&gt;标题 2&lt;/h2&gt; &lt;p&gt;这是一个段落。&lt;/p&gt; &lt;p&gt;这是另一个段落。&lt;/p&gt; &lt;br&gt; &lt;button class=&quot;b5&quot;&gt;从元素上删除类&lt;/button&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery css() 方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - css() 方法&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; /* jQuery css() 方法 css() 方法设置或返回被选元素的一个或多个样式属性。 */ $(document).ready(function () &#123; $(&quot;.b1&quot;).click(function () &#123; //下面的例子将返回首个匹配元素的 background-color 值： alert(&quot;Background color=&quot;+$(&quot;.c1 p&quot;).css(&quot;background-color&quot;)); &#125;); //如需设置指定的 CSS 属性，请使用如下语法： $(&quot;.b2&quot;).click(function () &#123; //下面的例子将返回首个匹配元素的 background-color 值： $(&quot;.c2 p&quot;).css(&quot;background-color&quot;,&quot;yellow&quot;); &#125;); $(&quot;.b3&quot;).click(function () &#123; //下面的例子将返回首个匹配元素的 background-color 值： $(&quot;.c3 p&quot;).css(&#123;&quot;background-color&quot;:&quot;yellow&quot;,&quot;font-size&quot;:&quot;200%&quot;&#125;); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;c1&quot;&gt;&lt;h2&gt;这是标题&lt;/h2&gt;&lt;p style=&quot;background-color:#ff0000&quot;&gt;这是一个段落。&lt;/p&gt;&lt;p style=&quot;background-color:#00ff00&quot;&gt;这是一个段落。&lt;/p&gt;&lt;p style=&quot;background-color:#0000ff&quot;&gt;这是一个段落。&lt;/p&gt;&lt;button class=&quot;b1&quot;&gt;返回 p 元素的背景色&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;c2&quot;&gt; &lt;h2&gt;这是标题&lt;/h2&gt; &lt;p style=&quot;background-color:#ff0000&quot;&gt;这是一个段落。&lt;/p&gt; &lt;p style=&quot;background-color:#00ff00&quot;&gt;这是一个段落。&lt;/p&gt; &lt;p style=&quot;background-color:#0000ff&quot;&gt;这是一个段落。&lt;/p&gt; &lt;button class=&quot;b2&quot;&gt;设置 p 元素的背景色&lt;/button&gt;&lt;/div&gt;&lt;div class=&quot;c3&quot;&gt; &lt;h2&gt;这是标题&lt;/h2&gt; &lt;p style=&quot;background-color:#ff0000&quot;&gt;这是一个段落。&lt;/p&gt; &lt;p style=&quot;background-color:#00ff00&quot;&gt;这是一个段落。&lt;/p&gt; &lt;p style=&quot;background-color:#0000ff&quot;&gt;这是一个段落。&lt;/p&gt; &lt;button class=&quot;b3&quot;&gt;设置 p 元素的样式&lt;/button&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery - 尺寸123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - 尺寸&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; //通过 jQuery，很容易处理元素和浏览器窗口的尺寸。 /*jQuery 尺寸 方法 jQuery 提供多个处理尺寸的重要方法： width() height() innerWidth() innerHeight() outerWidth() outerHeight()*/ /*jQuery width() 和 height() 方法 width() 方法设置或返回元素的宽度（不包括内边距、边框或外边距）。 height() 方法设置或返回元素的高度（不包括内边距、边框或外边距）。 下面的例子返回指定的 &lt;div&gt; 元素的宽度和高度： */ $(document).ready(function () &#123; $(&quot;.c1&quot;).click(function () &#123; var txt=&quot;&quot;; txt+=&quot;width of div:&quot;+$(&quot;#div1&quot;).width()+&quot;&lt;/br&gt;&quot;; txt+=&quot;height of div:&quot;+$(&quot;#div1&quot;).height()+&quot;&lt;/br&gt;&quot;; $(&quot;#div1&quot;).html(txt); &#125;); /* jQuery innerWidth() 和 innerHeight() 方法 innerWidth() 方法返回元素的宽度（包括内边距）。 innerHeight() 方法返回元素的高度（包括内边距）。 下面的例子返回指定的 &lt;div&gt; 元素的 inner-width/height： */ $(&quot;.c2&quot;).click(function () &#123; var txt=&quot;&quot;; txt+=&quot;width of div:&quot;+$(&quot;#div2&quot;).innerWidth()+&quot;&lt;/br&gt;&quot;; txt+=&quot;height of div:&quot;+$(&quot;#div2&quot;).innerHeight()+&quot;&lt;/br&gt;&quot;; $(&quot;#div2&quot;).html(txt); &#125;) /* jQuery outerWidth() 和 outerHeight() 方法 outerWidth() 方法返回元素的宽度（包括内边距和边框）。 outerHeight() 方法返回元素的高度（包括内边距和边框）。 下面的例子返回指定的 &lt;div&gt; 元素的 outer-width/height： */ $(&quot;.c3&quot;).click(function () &#123; var txt=&quot;&quot;; txt+=&quot;width of div:&quot;+$(&quot;#div3&quot;).outerHeight()+&quot;&lt;/br&gt;&quot;; txt+=&quot;height of div:&quot;+$(&quot;#div3&quot;).outerWidth()+&quot;&lt;/br&gt;&quot;; $(&quot;#div3&quot;).html(txt); &#125;); /* jQuery - 更多的 width() 和 height() 下面的例子返回文档（HTML 文档）$(document)和窗口$(window)（浏览器视口）的宽度和高度： */ $(&quot;.c4&quot;).click(function () &#123; var txt=&quot;&quot;; txt+=&quot;Document width/height: &quot; + $(document).width(); txt+=&quot;x&quot; + $(document).height() + &quot;\n&quot;; txt+=&quot;Window width/height: &quot; + $(window).width(); txt+=&quot;x&quot; + $(window).height(); alert(txt); &#125;); /* *设置宽度和高度 * 下面的例子设置指定的 &lt;div&gt; 元素的宽度和高度： */ $(&quot;.c5&quot;).click(function () &#123; $(&quot;#div5&quot;).width(500).height(500); &#125;) &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;div1&quot; style=&quot;height: 100px;width: 300px;padding: 10px;margin: 10px;border:1px solid blue;background-color: lightblue;&quot;&gt; &lt;button class=&quot;c1&quot;&gt;显示 div 的尺寸&lt;/button&gt; &lt;p&gt;width() - 返回元素的宽度。&lt;/p&gt; &lt;p&gt;height() - 返回元素的高度。&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;div2&quot; style=&quot;height: 150px;width: 300px;padding: 10px;margin: 10px;border:1px solid blue;background-color: lightblue;&quot;&gt; &lt;button class=&quot;c2&quot;&gt;显示 div 的尺寸&lt;/button&gt; &lt;p&gt;width() - 返回元素的宽度（包括内边距)。&lt;/p&gt; &lt;p&gt;height() - 返回元素的高度（包括内边距）。&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;div3&quot; style=&quot;height: 150px;width: 300px;padding: 10px;margin: 10px;border:1px solid blue;background-color: lightblue;&quot;&gt; &lt;button class=&quot;c3&quot;&gt;显示 div 的尺寸&lt;/button&gt; &lt;p&gt;width() -返回元素的宽度（包括内边距、边框和外边距）。&lt;/p&gt; &lt;p&gt;height() - 返回元素的宽度（包括内边距、边框和外边距）。&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;div4&quot; style=&quot;height: 150px;width: 300px;padding: 10px;margin: 10px;border:1px solid blue;background-color: lightblue;&quot;&gt; &lt;button class=&quot;c4&quot;&gt;显示 div 的尺寸&lt;/button&gt; &lt;p&gt;width() -返回document,width窗体的宽度&lt;/p&gt; &lt;p&gt; （包括内边距、边框和外边距）。&lt;/p&gt;&lt;/div&gt;&lt;div id=&quot;div5&quot; style=&quot;height: 150px;width: 300px;padding: 10px;margin: 10px;border:1px solid blue;background-color: lightblue;&quot;&gt; &lt;button class=&quot;c5&quot;&gt;设置 div 的尺寸&lt;/button&gt; &lt;p&gt;width() - 设置为500px&lt;/p&gt; &lt;p&gt;height() -设置为500px&lt;/p&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery 遍历 1234567891011121314151617181920212223&lt;!--什么是遍历？--&gt;&lt;!--jQuery 遍历，意为“移动”，--&gt;&lt;!--用于根据其相对于其他元素的关系来“查找”（或选取）HTML 元素。--&gt;&lt;!--以某项选择开始，并沿着这个选择移动，直到抵达您期望的元素为止。--&gt;&lt;!--下图展示了一个家族树。通过 jQuery 遍历，您能够从被选（当前的）元素开始，--&gt;&lt;!--轻松地在家族树中向上移动（祖先），向下移动（子孙），水平移动（同胞）。--&gt;&lt;!--这种移动被称为对 DOM 进行遍历。--&gt;&lt;div&gt; &lt;ul&gt; &lt;li&gt;&lt;span&gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;b&gt;&lt;/b&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/div&gt;&lt;!--&lt;div&gt; 元素是 &lt;ul&gt; 的父元素，同时是其中所有内容的祖先。--&gt;&lt;!--&lt;ul&gt; 元素是 &lt;li&gt; 元素的父元素，同时是 &lt;div&gt; 的子元素--&gt;&lt;!--左边的 &lt;li&gt; 元素是 &lt;span&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。--&gt;&lt;!--&lt;span&gt; 元素是 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。--&gt;&lt;!--两个 &lt;li&gt; 元素是同胞（拥有相同的父元素）。--&gt;&lt;!--右边的 &lt;li&gt; 元素是 &lt;b&gt; 的父元素，&lt;ul&gt; 的子元素，同时是 &lt;div&gt; 的后代。--&gt;&lt;!--&lt;b&gt; 元素是右边的 &lt;li&gt; 的子元素，同时是 &lt;ul&gt; 和 &lt;div&gt; 的后代。--&gt;&lt;p&gt;提示：祖先是父、祖父、曾祖父等等。后代是子、孙、曾孙等等。同胞拥有相同的父。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; ##jQuery 遍历 - 祖先1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery 遍历 - 祖先&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; /*祖先是父、祖父或曾祖父等等。 通过 jQuery，您能够向上遍历 DOM 树， 以查找元素的祖先*/ /* *向上遍历 DOM 树 *这些 jQuery 方法很有用，它们用于向上遍历 DOM 树： *parent() *parents() *parentsUntil()*/ /* jQuery parent() 方法 parent() 方法返回被选元素的直接父元素。 该方法只会向上一级对 DOM 树进行遍历。 下面的例子返回每个 &lt;span&gt; 元素的的直接父元素：*/ /* $(document).ready(function () &#123; $(&quot;span&quot;).parent().css(&#123;&quot;color&quot;:&quot;red&quot;,&quot;border&quot;:&quot;2px solid red&quot;&#125;); &#125;); */ /* * jQuery parents() 方法 parents() 方法返回被选元素的所有祖先元素， 它一路向上直到文档的根元素 (&lt;html&gt;)。*/ /*$(document).ready(function () &#123; $(&quot;span&quot;).parents().css(&#123;&quot;color&quot;:&quot;yellow&quot;,&quot;border&quot;:&quot;2px solid yellow&quot;&#125;); &#125;)*/ /* 下面的例子返回所有 &lt;span&gt; 元素的所有祖先， 并且它是 &lt;ul&gt; 元素： */ /*$(document).ready(function () &#123; $(&quot;span&quot;).parents(&quot;ul&quot;).css(&#123;&quot;color&quot;:&quot;yellow&quot;,&quot;border&quot;:&quot;2px solid yellow&quot;&#125;); &#125;)*/ /* jQuery parentsUntil() 方法 parentsUntil() 方法返回介于两个给定元素之间的所有祖先元素。 下面的例子返回介于 &lt;span&gt; 与 &lt;div&gt; 元素之间的所有祖先元素： */ /*$(document).ready(function () &#123; $(&quot;span&quot;).parentsUntil(&quot;div&quot;).css(&#123;&quot;color&quot;:&quot;blue&quot;,&quot;border&quot;:&quot;2px solid blue&quot;&#125;); &#125;) */ &lt;/script&gt; &lt;style&gt; .ancestors * &#123; display: block; border: 2px solid lightgrey; color: lightgrey; padding: 5px; margin: 15px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=&quot;ancestors&quot;&gt; &lt;div style=&quot;width:500px;&quot;&gt;div (曾祖父) &lt;ul&gt;ul (祖父) &lt;li&gt;li (直接父) &lt;span&gt;span&lt;/span&gt; &lt;/li&gt; &lt;/ul&gt; &lt;/div&gt; &lt;div style=&quot;width:500px;&quot;&gt;div (祖父) &lt;ul&gt; &lt;p&gt;p (直接父) &lt;span&gt;span&lt;/span&gt; &lt;/p&gt; &lt;/ul&gt; &lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery 遍历 - 后代123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery 遍历 - 后代&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt; &lt;/script&gt; &lt;script&gt; //后代是子、孙、曾孙等等。 //通过 jQuery，您能够向下遍历 DOM 树，以查找元素的后代。 //向下遍历 DOM 树,下面是两个用于向下遍历 DOM 树的 jQuery 方法： // children(),find() //jQuery children() 方法,children() 方法返回被选元素的所有直接子元素。 //该方法只会向下一级对 DOM 树进行遍历。 //下面的例子返回每个 &lt;div&gt; 元素的所有直接子元素： $(document).ready(function () &#123; $(&quot;#i1&quot;).children().css(&#123;&quot;color&quot;:&quot;red&quot;,&quot;border&quot;:&quot;2px solid red&quot;&#125;); //您也可以使用可选参数来过滤对子元素的搜索。 //下面的例子返回类名为 &quot;c2&quot; 的所有 &lt;p&gt; 元素， // 并且它们是 &lt;div&gt; 的直接子元素： $(&quot;div&quot;).children(&quot;p.c2&quot;).css(&#123;&quot;color&quot;:&quot;blue&quot;,&quot;border&quot;:&quot;2px solid blue&quot;&#125;) &#125;); //jQuery find() 方法 //find() 方法返回被选元素的后代元素，一路向下直到最后一个后代。 //下面的例子返回属于 &lt;div&gt; 后代的所有 &lt;span&gt; 元素： $(document).ready(function()&#123; $(&quot;#i3&quot;).find(&quot;span&quot;).css(&#123;&quot;color&quot;:&quot;yellow&quot;,&quot;border&quot;:&quot;2px solid yellow&quot;&#125;); &#125;); //下面的例子返回 &lt;div&gt; 的所有后代： $(document).ready(function()&#123; $(&quot;#i4&quot;).find(&quot;*&quot;).css(&#123;&quot;color&quot;:&quot;#0011FF&quot;,&quot;border&quot;:&quot;2px solid #0011FF&quot;&#125;); &#125;); &lt;/script&gt; &lt;style&gt; .descendants *&#123; display: block; border: 1px solid red; color: lightgray; padding: 15px; margin: 15px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;descendants&quot; style=&quot;width:500px;&quot; id=&quot;i1&quot;&gt;div (当前元素) &lt;p&gt;p (子)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;p&gt;p (child)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;descendants&quot; style=&quot;width:500px;&quot; id=&quot;i2&quot;&gt;div (当前元素) &lt;p class=&quot;c2&quot;&gt;p (子)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;p class=&quot;c2&quot;&gt;p (child)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;descendants&quot; style=&quot;width:500px;&quot; id=&quot;i3&quot;&gt;div (当前元素) &lt;p class=&quot;c3&quot;&gt;p (子)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;p class=&quot;c3&quot;&gt;p (child)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;/div&gt; &lt;div class=&quot;descendants&quot; style=&quot;width:500px;&quot; id=&quot;i4&quot;&gt;div (当前元素) &lt;p class=&quot;c3&quot;&gt;p (子)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;p class=&quot;c3&quot;&gt;p (child)&lt;span&gt;span (孙)&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery 遍历 - 同胞12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery 遍历 - 同胞&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt; &lt;/script&gt; &lt;script&gt; //同胞拥有相同的父元素。 //通过 jQuery，您能够在 DOM 树中遍历元素的同胞元素。 //有许多有用的方法让我们在 DOM 树进行水平遍历： // siblings() // next() // nextAll() // nextUntil() // prev() // prevAll() // prevUntil() //jQuery siblings() 方法 /*jQuery siblings() 方法 siblings() 方法返回被选元素的所有同胞元素。 下面的例子返回 &lt;h2&gt; 的所有同胞元素：*/ /*$(document).ready(function () &#123; $(&quot;h2&quot;).siblings().css(&#123;&quot;color&quot;:&quot;#37D315&quot;,&quot;border&quot;:&quot;2px solid black&quot;&#125;); &#125;)*/ //您也可以使用可选参数来过滤对同胞元素的搜索。 //下面的例子返回属于 &lt;h2&gt; 的同胞元素的所有 &lt;p&gt; 元素： /*$(document).ready(function () &#123; $(&quot;h2&quot;).siblings(&quot;p&quot;).css(&#123;&quot;color&quot;:&quot;#D3008C&quot;,&quot;border&quot;:&quot;2px solid #D3008C&quot;&#125;); &#125;)*/ //jQuery next() 方法 //next() 方法返回被选元素的下一个同胞元素。 //该方法只返回一个元素。 //下面的例子返回 &lt;h2&gt; 的下一个同胞元素： /*$(document).ready(function () &#123; $(&quot;h2&quot;).next().css(&#123;&quot;color&quot;:&quot;#D3008C&quot;,&quot;border&quot;:&quot;2px solid #D3008C&quot;&#125;); &#125;)*/ /*jQuery nextAll() 方法 nextAll() 方法返回被选元素的所有跟随的同胞元素。下面的例子返回 &lt;h2&gt; 的所有跟随的同胞元素：*/ /*$(document).ready(function () &#123; $(&quot;h2&quot;).nextAll().css(&#123;&quot;color&quot;:&quot;#0055d3&quot;,&quot;border&quot;:&quot;2px solid #0055d3&quot;&#125;); &#125;);*/ /*jQuery nextUntil() 方法 nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。下面的例子返回介于 &lt;h2&gt; 与 &lt;h6&gt; 元素之间的所有同胞元素：*/ $(document).ready(function () &#123; $(&quot;h2&quot;).nextUntil(&quot;h6&quot;).css(&#123;&quot;color&quot;:&quot;#9cd3af&quot;,&quot;border&quot;:&quot;2px solid #9cd3af&quot;&#125;); &#125;); /*jQuery prev(), prevAll() &amp; prevUntil() 方法 prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已： 它们返回的是前面的同胞元素（在 DOM 树中沿着同胞元素向后遍历，而不是向前）。*/ &lt;/script&gt; &lt;style&gt; .siblings * &#123; display: block; border: 2px solid lightgrey; color: lightgrey; padding: 5px; margin: 15px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;siblings&quot;&gt; &lt;div&gt;div (父) &lt;p&gt;p&lt;/p&gt; &lt;span&gt;span&lt;/span&gt; &lt;h2&gt;h2&lt;/h2&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;p&gt;p&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery 遍历 - 过滤12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery 遍历 - 同胞&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt; &lt;/script&gt; &lt;script&gt; //同胞拥有相同的父元素。 //通过 jQuery，您能够在 DOM 树中遍历元素的同胞元素。 //有许多有用的方法让我们在 DOM 树进行水平遍历： // siblings() // next() // nextAll() // nextUntil() // prev() // prevAll() // prevUntil() //jQuery siblings() 方法 /*jQuery siblings() 方法 siblings() 方法返回被选元素的所有同胞元素。 下面的例子返回 &lt;h2&gt; 的所有同胞元素：*/ /*$(document).ready(function () &#123; $(&quot;h2&quot;).siblings().css(&#123;&quot;color&quot;:&quot;#37D315&quot;,&quot;border&quot;:&quot;2px solid black&quot;&#125;); &#125;)*/ //您也可以使用可选参数来过滤对同胞元素的搜索。 //下面的例子返回属于 &lt;h2&gt; 的同胞元素的所有 &lt;p&gt; 元素： /*$(document).ready(function () &#123; $(&quot;h2&quot;).siblings(&quot;p&quot;).css(&#123;&quot;color&quot;:&quot;#D3008C&quot;,&quot;border&quot;:&quot;2px solid #D3008C&quot;&#125;); &#125;)*/ //jQuery next() 方法 //next() 方法返回被选元素的下一个同胞元素。 //该方法只返回一个元素。 //下面的例子返回 &lt;h2&gt; 的下一个同胞元素： /*$(document).ready(function () &#123; $(&quot;h2&quot;).next().css(&#123;&quot;color&quot;:&quot;#D3008C&quot;,&quot;border&quot;:&quot;2px solid #D3008C&quot;&#125;); &#125;)*/ /*jQuery nextAll() 方法 nextAll() 方法返回被选元素的所有跟随的同胞元素。下面的例子返回 &lt;h2&gt; 的所有跟随的同胞元素：*/ /*$(document).ready(function () &#123; $(&quot;h2&quot;).nextAll().css(&#123;&quot;color&quot;:&quot;#0055d3&quot;,&quot;border&quot;:&quot;2px solid #0055d3&quot;&#125;); &#125;);*/ /*jQuery nextUntil() 方法 nextUntil() 方法返回介于两个给定参数之间的所有跟随的同胞元素。下面的例子返回介于 &lt;h2&gt; 与 &lt;h6&gt; 元素之间的所有同胞元素：*/ $(document).ready(function () &#123; $(&quot;h2&quot;).nextUntil(&quot;h6&quot;).css(&#123;&quot;color&quot;:&quot;#9cd3af&quot;,&quot;border&quot;:&quot;2px solid #9cd3af&quot;&#125;); &#125;); /*jQuery prev(), prevAll() &amp; prevUntil() 方法 prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已： 它们返回的是前面的同胞元素（在 DOM 树中沿着同胞元素向后遍历，而不是向前）。*/ &lt;/script&gt; &lt;style&gt; .siblings * &#123; display: block; border: 2px solid lightgrey; color: lightgrey; padding: 5px; margin: 15px; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body class=&quot;siblings&quot;&gt; &lt;div&gt;div (父) &lt;p&gt;p&lt;/p&gt; &lt;span&gt;span&lt;/span&gt; &lt;h2&gt;h2&lt;/h2&gt; &lt;h3&gt;h3&lt;/h3&gt; &lt;p&gt;p&lt;/p&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery - AJAX 简介123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - AJAX 简介&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; $(document).ready(function () &#123; $(&quot;#btn1&quot;).click(function () &#123; $(&quot;#test&quot;).load(&apos;text.txt&apos;); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!--AJAX 是与服务器交换数据的艺术，--&gt;&lt;!--它在不重载全部页面的情况下，实现了对部分网页的更新。--&gt;&lt;h3 id=&quot;test&quot;&gt;请点击下面的按钮，通过 jQuery AJAX 改变这段文本。&lt;/h3&gt;&lt;button id=&quot;btn1&quot; type=&quot;button&quot;&gt;获得外部的内容&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 创建文本文件text.txt1hello world jQuery - AJAX load() 方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - AJAX load() 方法&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script&gt; // &lt;!--jQuery load() 方法--&gt; // &lt;!--jQuery load() 方法是简单但强大的 AJAX 方法。--&gt; // &lt;!--load() 方法从服务器加载数据，并把返回的数据放入被选元素中。--&gt; // &lt;!--语法：--&gt; // &lt;!--$(selector).load(URL,data,callback);--&gt; // &lt;!--必需的 URL 参数规定您希望加载的 URL。--&gt; // &lt;!--可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。--&gt; // &lt;!--可选的 callback 参数是 load() 方法完成后所执行的函数名称--&gt; // &lt;!--下面的例子把 &quot;demo_test.txt&quot; 文件中 id=&quot;p1&quot; 的元素的内容，--&gt; // &lt;!--加载到指定的 &lt;div&gt; 元素中：--&gt; // $(document).ready(function () &#123; // $(&quot;#b1&quot;).click(function () &#123; // $(&quot;#div1&quot;).load(&quot;text2.txt #p1&quot;); // &#125;); // &#125;); //可选的 callback 参数规定当 load() 方法完成后所要允许的回调函数。回调函数可以设置不同的参数： // responseTxt - 包含调用成功时的结果内容 // statusTXT - 包含调用的状态 // xhr - 包含 XMLHttpRequest 对象 // 下面的例子会在 load() 方法完成后显示一个提示框。如果 load() 方法已成功，则显示“外部内容加载成功！”， // 而如果失败，则显示错误消息： $(document).ready(function () &#123; $(&quot;#b2&quot;).click(function () &#123; $(&quot;#div2&quot;).load(&quot;text2.txt #p1&quot;,function (responseTxt,statusTxt,xhr) &#123; if (statusTxt==&quot;success&quot;) alert(&quot;外部内容加载成功&quot;); if (statusTxt == &quot;error&quot;) alert(&quot;Error:&quot;+xhr.status+&quot;:&quot;+xhr.statusText); &#125;); &#125;); &#125;); &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;div id=&quot;div1&quot;&gt;&lt;h2&gt;使用 jQuery AJAX 来改变文本&lt;/h2&gt;&lt;/div&gt;&lt;button id=&quot;b1&quot;&gt;获得外部内容&lt;/button&gt;&lt;div id=&quot;div2&quot;&gt;&lt;h2&gt;使用 jQuery AJAX 来改变文本&lt;/h2&gt;&lt;/div&gt;&lt;button id=&quot;b2&quot;&gt;获得外部内容&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; 创建文本文件text.txt12&lt;p id=&quot;p1&quot;&gt;这是P1 &lt;/p&gt;&lt;p id=&quot;p2&quot;&gt;这是P2 &lt;/p&gt;]]></content>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[最近学习]]></title>
    <url>%2F2018%2F10%2F14%2F%E6%9C%80%E8%BF%91%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[最近一段时间会学习前端，毕竟还有两个月就要实习了，html&gt;css&gt;js&gt;各种框架&gt;写一个demo现在学习到JS的库JQuery，按照W3S教程不断打代码感觉还是挺不错的，就是代码一直记不住JQuery动画jQuery animate() 方法用于创建自定义动画。1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; var div=$(&quot;div&quot;); div.animate(&#123;height:&apos;300px&apos;,opacity:&apos;0.4&apos;&#125;,&quot;slow&quot;); div.animate(&#123;width:&apos;300px&apos;,opacity:&apos;0.8&apos;&#125;,&quot;slow&quot;); div.animate(&#123;height:&apos;100px&apos;,opacity:&apos;0.4&apos;&#125;,&quot;slow&quot;); div.animate(&#123;width:&apos;100px&apos;,opacity:&apos;0.8&apos;&#125;,&quot;slow&quot;); &#125;);&#125;);&lt;/script&gt; &lt;/head&gt; &lt;body&gt;&lt;button&gt;开始动画&lt;/button&gt;&lt;p&gt;默认情况下，所有 HTML 元素的位置都是静态的，并且无法移动。如需对位置进行操作，记得首先把元素的 CSS position 属性设置为 relative、fixed 或 absolute。&lt;/p&gt;&lt;div style=&quot;background:#98bf21;height:100px;width:100px;position:absolute;&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery 停止动画jQuery stop() 方法用于在动画或效果完成前对它们进行停止。1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(document).ready(function()&#123; $(&quot;#flip&quot;).click(function()&#123; $(&quot;#panel&quot;).slideDown(5000); &#125;); $(&quot;#stop&quot;).click(function()&#123; $(&quot;#panel&quot;).stop(); &#125;);&#125;);&lt;/script&gt; &lt;style type=&quot;text/css&quot;&gt; #panel,#flip&#123;padding:5px;text-align:center;background-color:#e5eecc;border:solid 1px #c3c3c3;&#125;#panel&#123;padding:50px;display:none;&#125;&lt;/style&gt;&lt;/head&gt;&lt;body&gt; jQuery stop() 动画（带有参数）123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt; $(document).ready(function()&#123; $(&quot;#start&quot;).click(function()&#123; $(&quot;div&quot;).animate(&#123;left:&apos;100px&apos;&#125;,5000); $(&quot;div&quot;).animate(&#123;fontSize:&apos;3em&apos;&#125;,5000); &#125;); $(&quot;#stop&quot;).click(function()&#123; $(&quot;div&quot;).stop(); &#125;); $(&quot;#stop2&quot;).click(function()&#123; $(&quot;div&quot;).stop(true); &#125;); $(&quot;#stop3&quot;).click(function()&#123; $(&quot;div&quot;).stop(true,true); &#125;); &#125;);&lt;/script&gt; &lt;/head&gt;&lt;body&gt;&lt;button id=&quot;start&quot;&gt;开始&lt;/button&gt;&lt;button id=&quot;stop&quot;&gt;停止&lt;/button&gt;&lt;button id=&quot;stop2&quot;&gt;停止所有&lt;/button&gt;&lt;button id=&quot;stop3&quot;&gt;停止但要完成&lt;/button&gt;&lt;p&gt;&lt;b&gt;&quot;开始&quot;&lt;/b&gt; 按钮会启动动画。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&quot;停止&quot;&lt;/b&gt; 按钮会停止当前活动的动画，但允许已排队的动画向前执行。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&quot;停止所有&quot;&lt;/b&gt; 按钮停止当前活动的动画，并清空动画队列；因此元素上的所有动画都会停止。&lt;/p&gt;&lt;p&gt;&lt;b&gt;&quot;停止但要完成&quot;&lt;/b&gt; 会立即完成当前活动的动画，然后停下来。&lt;/p&gt; &lt;div style=&quot;background:#98bf21;height:100px;width:200px;position:absolute;&quot;&gt;HELLO&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; jQuery Callback 函数没有 callback函数1234567891011121314151617&lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(&quot;p&quot;).hide(2000); alert(&quot;The paragraph is now hidden&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button type=&quot;button&quot;&gt;Hide&lt;/button&gt;&lt;p&gt;This is a paragraph with little content.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; 有 callback函数123456789101112131415161718&lt;html&gt;&lt;head&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;/jquery/jquery.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(&quot;p&quot;).hide(1000,function()&#123; alert(&quot;The paragraph is now hidden&quot;); &#125;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button type=&quot;button&quot;&gt;Hide&lt;/button&gt;&lt;p&gt;This is a paragraph with little content.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; jQuery - Chaining通过 jQuery，您可以把动作/方法链接起来。Chaining 允许我们在一条语句中允许多个 jQuery 方法（在相同的元素上）。123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function() &#123; $(&quot;button&quot;).click(function()&#123; $(&quot;#p1&quot;).css(&quot;color&quot;,&quot;red&quot;).slideUp(2000).slideDown(2000); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;p1&quot;&gt;jQuery 乐趣十足！&lt;/p&gt;&lt;button&gt;点击这里&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery - 获得内容和属性获得内容 - text()、html() 以及 val()三个简单实用的用于 DOM 操作的 jQuery 方法：text() - 设置或返回所选元素的文本内容html() - 设置或返回所选元素的内容（包括 HTML 标记）val() - 设置或返回表单字段的值下面的例子演示如何通过 jQuery text() 和 html() 方法来获得内容：jQuery val() 方法12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; alert(&quot;Value: &quot; + $(&quot;#test&quot;).val()); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;姓名：&lt;input type=&quot;text&quot; id=&quot;test&quot; value=&quot;米老鼠&quot;&gt;&lt;/p&gt;&lt;button&gt;显示值&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery attr() 方法用于获取属性值。12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; alert($(&quot;#w3s&quot;).attr(&quot;href&quot;)); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn&quot; id=&quot;w3s&quot;&gt;W3School.com.cn&lt;/a&gt;&lt;/p&gt;&lt;button&gt;显示 href 值&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery - 获得内容和属性获得内容 - text()、html() 以及 val()三个简单实用的用于 DOM 操作的 jQuery 方法：text() - 设置或返回所选元素的文本内容html() - 设置或返回所选元素的内容（包括 HTML 标记）val() - 设置或返回表单字段的值通过 text()、html() 以及 val() 方法来设置内容：12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;#btn1&quot;).click(function()&#123; $(&quot;#test1&quot;).text(&quot;Hello world!&quot;); &#125;); $(&quot;#btn2&quot;).click(function()&#123; $(&quot;#test2&quot;).html(&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;); &#125;); $(&quot;#btn3&quot;).click(function()&#123; $(&quot;#test3&quot;).val(&quot;Dolly Duck&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p id=&quot;test1&quot;&gt;这是段落。&lt;/p&gt;&lt;p id=&quot;test2&quot;&gt;这是另一个段落。&lt;/p&gt;&lt;p&gt;Input field: &lt;input type=&quot;text&quot; id=&quot;test3&quot; value=&quot;Mickey Mouse&quot;&gt;&lt;/p&gt;&lt;button id=&quot;btn1&quot;&gt;设置文本&lt;/button&gt;&lt;button id=&quot;btn2&quot;&gt;设置 HTML&lt;/button&gt;&lt;button id=&quot;btn3&quot;&gt;设置值&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery attr() 方法也用于设置/改变属性值。12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(&quot;#w3s&quot;).attr(&quot;href&quot;,&quot;http://www.w3school.com.cn/jquery&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;&lt;a href=&quot;http://www.w3school.com.cn&quot; id=&quot;w3s&quot;&gt;W3School.com.cn&lt;/a&gt;&lt;/p&gt;&lt;button&gt;改变 href 值&lt;/button&gt;&lt;p&gt;请把鼠标指针移动到链接上，或者点击该链接，来查看已经改变的 href 值。&lt;/p&gt;&lt;/body&gt;&lt;/html&gt; jQuery - 添加新元素/内容添加新的 HTML 内容我们将学习用于添加新内容的四个 jQuery 方法：append() - 在被选元素的结尾插入内容prepend() - 在被选元素的开头插入内容after() - 在被选元素之后插入内容before() - 在被选元素之前插入内容添加新元素/内容jQuery append() 方法123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;#btn1&quot;).click(function()&#123; $(&quot;p&quot;).append(&quot; &lt;b&gt;Appended text&lt;/b&gt;.&quot;); &#125;); $(&quot;#btn2&quot;).click(function()&#123; $(&quot;ol&quot;).append(&quot;&lt;li&gt;Appended item&lt;/li&gt;&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is another paragraph.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;List item 1&lt;/li&gt;&lt;li&gt;List item 2&lt;/li&gt;&lt;li&gt;List item 3&lt;/li&gt;&lt;/ol&gt;&lt;button id=&quot;btn1&quot;&gt;追加文本&lt;/button&gt;&lt;button id=&quot;btn2&quot;&gt;追加列表项&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery prepend() 方法123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;#btn1&quot;).click(function()&#123; $(&quot;p&quot;).prepend(&quot;&lt;b&gt;Prepended text&lt;/b&gt;. &quot;); &#125;); $(&quot;#btn2&quot;).click(function()&#123; $(&quot;ol&quot;).prepend(&quot;&lt;li&gt;Prepended item&lt;/li&gt;&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;p&gt;This is a paragraph.&lt;/p&gt;&lt;p&gt;This is another paragraph.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;List item 1&lt;/li&gt;&lt;li&gt;List item 2&lt;/li&gt;&lt;li&gt;List item 3&lt;/li&gt;&lt;/ol&gt;&lt;button id=&quot;btn1&quot;&gt;添加文本&lt;/button&gt;&lt;button id=&quot;btn2&quot;&gt;添加列表项&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery after() 和 before() 方法jQuery after() 方法在被选元素之后插入内容。jQuery before() 方法在被选元素之前插入内容。123456789101112131415161718192021222324&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;script src=&quot;/jquery/jquery-1.11.1.min.js&quot;&gt;&lt;/script&gt;&lt;script&gt;$(document).ready(function()&#123; $(&quot;#btn1&quot;).click(function()&#123; $(&quot;img&quot;).before(&quot;&lt;b&gt;Before&lt;/b&gt;&quot;); &#125;); $(&quot;#btn2&quot;).click(function()&#123; $(&quot;img&quot;).after(&quot;&lt;i&gt;After&lt;/i&gt;&quot;); &#125;);&#125;);&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;img src=&quot;/i/eg_w3school.gif&quot; alt=&quot;W3School Logo&quot; /&gt;&lt;br&gt;&lt;br&gt;&lt;button id=&quot;btn1&quot;&gt;在图片前面添加文本&lt;/button&gt;&lt;button id=&quot;btn2&quot;&gt;在图片后面添加文本&lt;/button&gt;&lt;/body&gt;&lt;/html&gt; jQuery - 删除元素jQuery remove() 方法删除被选元素及其子元素。jQuery empty() 方法删除被选元素的子元素。两者的区别123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;jQuery - 删除元素&lt;/title&gt; &lt;script src=&quot;jquery-3.3.1.js&quot;&gt;&lt;/script&gt; &lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function () &#123; $(&quot;#b1&quot;).click(function () &#123; $(&quot;#div1&quot;).empty(); &#125;); $(&quot;#b2&quot;).click(function () &#123; $(&quot;#div2&quot;).remove(); &#125;); &#125;) $(&quot;document&quot;).ready(function () &#123; $(&quot;#b3&quot;).click(function () &#123; $(&quot;p&quot;).remove(&quot;.italic&quot;); &#125;) &#125;) &lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;!--如需删除元素和内容，一般可使用以下两个 jQuery 方法：remove() - 删除被选元素（及其子元素）empty() - 从被选元素中删除子元素--&gt; &lt;div id=&quot;div1&quot; style=&quot;height:100px;width: 300px;border: 1px solid black;background-color:yellow;&quot;&gt; This is some text in the div. &lt;p&gt;This is a paragraph in the div.&lt;/p&gt; &lt;p&gt;This is another paragraph in the div.&lt;/p&gt;- &lt;/div&gt; &lt;br&gt; &lt;div id=&quot;div2&quot; style=&quot;height:100px;width: 300px;border: 1px solid black;background-color:yellow;&quot;&gt; This is some text in the div. &lt;p&gt;This is a paragraph in the div.&lt;/p&gt; &lt;p&gt;This is another paragraph in the div.&lt;/p&gt; &lt;/div&gt; &lt;p class=&quot;italic&quot;&gt;This is a paragraph in the div.&lt;/p&gt; &lt;p&gt;This is another paragraph in the div.&lt;/p&gt;&lt;br&gt;&lt;button id=&quot;b1&quot;&gt;删除 empty() 元素&lt;/button&gt;&lt;button id=&quot;b2&quot;&gt;删除 remove() 元素&lt;/button&gt;&lt;button id=&quot;b3&quot;&gt;删除 class=&quot;italic&quot; 的所有 p 元素&lt;/button&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo各种问题]]></title>
    <url>%2F2018%2F10%2F13%2Fhexo_build%2F</url>
    <content type="text"><![CDATA[1.Github上新建username.github.io仓库并初始化hexo文档cd /hexo init Hexocd /Hexonpm instalhexo generate（可简写为hexo g）hexo sever（可简写为hexo s） 2.next设置文档 3.进一步美化进一步美化2爱心效果添加网易云设置全文阅读添加404公益页面 网易云音乐,不知道为什么播放不了，get /的问题，可以常考github]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F10%2F13%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
